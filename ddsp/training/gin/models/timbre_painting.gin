# -*-Python-*-
# Autoencoder that decodes from (loudness, f0, z).
# z = encoder(audio)

import ddsp
import ddsp.training

# =====
# Model
# =====
get_model.model = @models.Autoencoder()


# Preprocessor
Autoencoder.preprocessor = @preprocessing.DefaultPreprocessor()
DefaultPreprocessor.time_steps = 1000

# Encoder
Autoencoder.encoder = @encoders.MfccTimeDistributedRnnEncoder()
MfccTimeDistributedRnnEncoder.rnn_channels = 512
MfccTimeDistributedRnnEncoder.rnn_type = 'gru'
MfccTimeDistributedRnnEncoder.z_dims = 16
MfccTimeDistributedRnnEncoder.z_time_steps = 125

# Decoder
Autoencoder.decoder = @decoders.ParallelWaveGANUpsampler()
ParallelWaveGANUpsampler = ('audio', 1)


# Losses
Autoencoder.losses = [
    @losses.SpectralLoss(),
    @losses.AdversarialLoss()
]
SpectralLoss.loss_type = 'L1'
SpectralLoss.mag_weight = 1.0
SpectralLoss.logmag_weight = 1.0

AdversarialLoss.discriminator =  @discriminators.ParallelWaveGANDiscriminator()
ParallelWaveGANDiscriminator

