# -*-Python-*-

import ddsp
import ddsp.training

# Decoder
get_combined_model.decoder = @decoders.RnnFcDecoder()
RnnFcDecoder.rnn_channels = 512
RnnFcDecoder.rnn_type = 'gru'
RnnFcDecoder.ch = 512
RnnFcDecoder.layers_per_stack = 3
RnnFcDecoder.input_keys = ('ld_scaled', 'f0_scaled', 'z')
RnnFcDecoder.output_splits = (('amps', 1),
                              ('harmonic_distribution', 100),
                              ('noise_magnitudes', 65))
# ==============
# ProcessorGroup
# ==============
get_combined_model.processor_group = @processors.ProcessorGroup()

ProcessorGroup.dag = [
  (@synths.Harmonic(),
    ['amps', 'harmonic_distribution', 'f0_hz']),
  (@synths.FilteredNoise(),
    ['noise_magnitudes']),
  (@processors.Add(),
    ['filtered_noise/signal', 'harmonic/signal']),
]

# Harmonic Synthesizer
Harmonic.name = 'harmonic'
Harmonic.n_samples = 64000
Harmonic.sample_rate = 16000
Harmonic.normalize_below_nyquist = True
Harmonic.scale_fn = @core.exp_sigmoid

# Filtered Noise Synthesizer
FilteredNoise.name = 'filtered_noise'
FilteredNoise.n_samples = 64000
FilteredNoise.window_size = 0
FilteredNoise.scale_fn = @core.exp_sigmoid

# Add
processors.Add.name = 'add'
